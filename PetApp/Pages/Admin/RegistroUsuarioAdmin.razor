@page "/admin/registrar-usuario"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using PetApp.Models
@attribute [Authorize(Roles = "Administrador")]
@inject PetApp.Services.IAuthService AuthService
@inject NavigationManager Navigation

<h3>Registrar Usuario (Administrador)</h3>

<EditForm Model="@usuario" OnValidSubmit="RegistrarUsuario">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Nombre:</label>
        <InputText @bind-Value="usuario.Nombre" class="form-control" />
    </div>
    <div>
        <label>Correo:</label>
        <InputText @bind-Value="usuario.Correo" class="form-control" />
    </div>
    <div>
        <label>Contraseña:</label>
        <InputText @bind-Value="usuario.Contrasena" type="password" class="form-control" />
    </div>
    <div>
        <label>Rol:</label>
        <InputSelect @bind-Value="usuario.Rol" class="form-control">
            <option value="Cliente">Cliente</option>
            <option value="Administrador">Administrador</option>
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary mt-2">Registrar Usuario</button>
</EditForm>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="text-danger">@mensaje</p>
}

@code {
    Usuario usuario = new();
    string mensaje = "";

    private async Task RegistrarUsuario()
    {
        var existe = await AuthService.LoginAsync(usuario.Correo, usuario.Contrasena);
        if (existe != null)
        {
            mensaje = "Ya existe un usuario con ese correo.";
            return;
        }

        await AuthService.RegistrarUsuarioAsync(usuario);
        mensaje = "Usuario registrado exitosamente.";
        usuario = new Usuario(); // Limpia el formulario
    }
}
